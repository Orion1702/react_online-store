1)
npm init -y
Появляется package.json

2)
express - система управления базами даных 
pg - 
sequiluze -
cors - для обращения с браузера к серверу
dotenv - для файла с параметрами сервера, что бы можно было ими оперировать
npm install express pg pg-hstore sequiluze cors dotenv

3) Дев зависимость, что бы не перезапускать сервер после каждого изменения в коде
npm install -D nodemon

4) Меняеем в package.json скрипт на     "dev": "nodemon index.js"

5) index.js
Запускаем прослушку сервера модулем ЕКСПРЕСС
const express = require('express') //подгружаем модуль express

const PORT = 5000

const app = express() // Создаем объект

// Какой порт прослушивает наш сервер
app.listen(PORT, () => console.log(`Server start on PORT ${PORT}`))

6) Создаем файл .env и задаем там все параметры 
require('dotenv').config() - подключаем считвание параметров файла
const PORT = process.env.PORT  - считываем параметры

Запустился сервер по адресу http://localhost:5000/

7) db.js
Импортируем  модуль Sequelize
создаем и экспортирум новый объкт + параметры из .ENV


8) B index.js Импортируем из db подключение

9) Прорисовывем модель базы даных
Папка models -> models.js
Подключение из db.js
Прорисовка моделей
Приписываем связи
Експорт

10) index.js
app.use(cors()) // АПП теперь работает с запросами в браузере
app.use(express.json()) // форматирует в ДЖЕЙСОН

app.get('/', (req, res) => {
    res.status(200).json({message: 'WORKING!!!'}) // Проверяем
})


11) Расписываем маршруты
папка routes c файлами и объединяет их всех в индексе
создаем для каждого файла експресс и импортируем  его

В каждом файле создаем подобный класс и прописываем ему методы ГЕТ и ПОСТ  и експортируем


12) Делаем контролер
папка controllers -> userController.js
Пишем класс с функциями которые будем вызывать в роуте 

13) папка error для универсального обработчика ошибок
ApiError.js пишем класс ошибки с функциями под разные ответы сервера

14) userController.js - делаем проверку на наличие ID и выводим ошибку, тестируем
http://localhost:5000/api/user/auth - ошибка
http://localhost:5000/api/user/auth?id=5 - отдает 5

15)typeController.js - создание типа,
импорт Type из require('../models/models')
и обработчик ошибок const ApiError = require('../error/ApiError');
в функции create дописываем передачу запроса с именем и отдачу ответу в реторн
const {name} = req.body
const type = await Type.create({name})
return res.json(type)

routes/typeRouter.js импортируем контролер и добавляем в роутеры функции класса контролера
router.post('/', typedController.create)

Тоже самое с Брендами
Дописываем гет запрос на вызов всех типов

Тоже самое делаем для брендов.

16) deviceController.js
Создаем данные для девайса
Для картинок нужно специальный модуль
npm i express-fileupload
В index.js импортируем этот пакет
app.use(express.static(path.resolve(__dirname, 'static'))) // показываем что файлы из папки статик нужно отдавать как статику
deviceController.js
Устанавливаем пакет uuid для генерации рандомных id которые не будут повторятся
перемещяем картинку в  папку статик
прописываем создание 

выбираем все девайсы
дописываем вариант для сортировки по брендам и типам
содаем вывод постраничный с лимитом на вывод



